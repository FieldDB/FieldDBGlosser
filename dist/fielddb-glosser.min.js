/*! fielddb-glosser - v1.82.0 - 2013-11-28
* https://github.com/OpenSourceFieldlinguistics/FieldDB/issues/milestones?state=closed
* Copyright (c) 2013 FieldDB Contributors; Licensed Apache 2.0 */
!function(a){"use strict";var b=b||{log:function(){}},c=c||{debugMode:!1,debug:function(a,c,d,e){this.debugMode&&(b.log(a),c&&b.log(c),d&&b.log(d),e&&b.log(e))},makeCORSRequest:function(a){c.debugMode=!1,a.method||(a.method=a.type||"GET"),a.url||c.bug("There was an error. Please report this."),a.data||(a.data=""),a.dataToSend=JSON.stringify(a.data).replace(/,/g,"&").replace(/:/g,"=").replace(/"/g,"").replace(/[}{]/g,""),"GET"===a.method&&a.data&&(a.url=a.url+"?"+a.dataToSend);var b=function(a,b){var c=new XMLHttpRequest;return"withCredentials"in c?c.open(a,b,!0):"undefined"!=typeof XDomainRequest?(c=new XDomainRequest,c.open(a,b)):c=null,c},d=b(a.method,a.url);return d?(d.setRequestHeader("Content-type","application/json"),d.withCredentials=!0,d.onload=function(b,e,f){var g=d.responseText;c.debugMode&&c.debug("Response from CORS request to "+a.url+": "+g),"function"==typeof a.success&&(g?a.success(JSON.parse(g)):(c.bug("There was no content in the server's response text. Please report this."),a.error(b,e,f))),c.debugMode=!1},d.onerror=function(b,d,e){c.debugMode&&c.debug(b,d,e),c.bug("There was an error making the CORS request to "+a.url+" from "+window.location.href+" the app will not function normally. Please report this."),"function"==typeof a.error&&a.error(b,d,e)},"POST"===a.method?d.send(JSON.stringify(a.data)):d.send(),void 0):(c.bug("CORS not supported, your browser is unable to contact the database."),void 0)}};a.currentCorpusName="",a.downloadPrecedenceRules=function(d,e,f){if(!e||"default"===e){if(!window.app)throw"Glosser cant be guessed, there is no app so the URL must be defined.";var g=window.app.get("corpus").get("couchConnection"),h=c.getCouchUrl(g);e=h+"/_design/pages/_view/precedence_rules?group=true"}c.makeCORSRequest({type:"GET",url:e,success:function(b){localStorage.setItem(d+"precendenceRules",JSON.stringify(b.rows));var c=_.chain(b.rows).groupBy(function(a){return a.key.x+"-"+a.key.y}).value();localStorage.setItem(d+"reducedRules",JSON.stringify(c)),a.currentCorpusName=d,"function"==typeof f&&f()},error:function(a){b.log("error getting precedence rules:",a)},dataType:""})},a.morphemefinder=function(b){var d="",e=localStorage.getItem(a.currentCorpusName+"reducedRules"),f=[];if(e){e=JSON.parse(e);var g=b.trim().split(/ +/);for(var h in g){g[h]="@"+g[h]+"@";var i=[];for(var j in e)g[h].indexOf(j.replace(/-/,""))>=0&&i.push({r:e[j]});var k=[];k.push("@");for(var l=0;10>l&&void 0!==k[l];l++)for(var m in i)if(k[l]===i[m].r[0].key.x){if(k[l+1]){k.pop();break}k[l+1]=i[m].r[0].key.y}var n=[];if("@"!==k[k.length-1]||1===k.length){n.push("@");for(var o=0;10>o&&void 0!==n[o];o++)for(var p in i)if(n[o]===i[p].r[0].key.y){if(n[o+1]){n.pop();break}n[o+1]=i[p].r[0].key.x}}var q=[];q=k.concat(n.reverse());for(var r in q)q[r]="("+q[r]+")";var s=new RegExp(q.join("(.*)"),"");d=g[h].replace(s,"$1-$2-$3-$4-$5-$6-$7-$8-$9").replace(/\$[0-9]/g,"").replace(/@/g,"").replace(/--+/g,"-").replace(/^-/,"").replace(/-$/,""),c.debugMode&&c.debug("Potential parse of "+g[h].replace(/@/g,"")+" is "+d),f.push(d)}}return f.join(" ")},a.toastedUserToSync=!1,a.toastedUserToImport=0,a.glossFinder=function(b){var c=b.split(/ +/),d=[];if(!window.app.get("corpus"))return"";if(!window.app.get("corpus").lexicon.get("lexiconNodes")){var e=31;return e>30&&!a.toastedUserToSync?(a.toastedUserToSync=!0,window.appView.toastUser("You probably have enough data to train an autoglosser for your corpus.\n\nIf you sync your data with the team server then editing the morphemes will automatically run the auto exports.","alert-success","Sync to train your auto-glosser:")):(a.toastedUserToImport++,a.toastedUserToImport%10===1&&30>e&&window.appView.toastUser("You have roughly "+e+" datum saved in your pouch, if you have around 30 datum, then you have enough data to train an autoglosser for your corpus.","alert-info","AutoGlosser:")),""}var f=window.app.get("corpus").lexicon.get("lexiconNodes"),g=function(a){return a.get("value")};for(var h in c){var i=c[h].split("-"),j=[];for(var k in i){var l=_.max(f.where({morpheme:i[k]}),g),m="?";l&&(m=l.get("gloss")),j.push(m)}d.push(j.join("-"))}return d.join(" ")},a.generateForceDirectedRulesJsonForD3=function(b,c){if(c||(c=a.currentCorpusName),b||(b=localStorage.getItem(c+"precendenceRules"),b&&(b=JSON.parse(b))),b){var d=[],e=[];for(var f in b){"@"===b[f].key.x&&(b[f].key.x="#_"),"@"===b[f].key.y&&(b[f].key.y="_#");var g=e.indexOf(b[f].key.x);0>g&&(e.push(b[f].key.x),g=e.length-1);var h=e.indexOf(b[f].key.y);0>h&&(e.push(b[f].key.y),h=e.length-1),-1===b[f].key.y.indexOf("@")&&d.push({source:g,target:h,value:1})}var i=[];for(var j in e)i.push({name:e[j],length:e[j].length});var k={};return k.links=d,k.nodes=i,a.rulesGraph=k,k}},a.saveAndInterConnectInApp=function(a){"function"==typeof a&&a()},a.visualizeMorphemesAsForceDirectedGraph=function(b,c,d){if(!d)throw"Must provide corpus name to be able to visualize morphemes";if(a.currentCorpusName=d,b||(b=a.rulesGraph,b?0===b.links.length&&(b=a.generateForceDirectedRulesJsonForD3()):b=a.generateForceDirectedRulesJsonForD3()),b&&0!==a.rulesGraph.links.length){var e=b,f=800,g=300,h=d3.scale.linear().range(["darkblue","darkred"]).domain([1,8]),i=(d3.scale.linear().range([0,f]),d3.scale.linear().range([0,g-40]),d3.layout.force().charge(-120).linkStrength(.2).linkDistance(30).size([f,g])),j=d3.select(c).append("svg").attr("width",f).attr("title","Morphology Visualization for "+d).attr("height",g),k="Click to search morphemes in your corpus";b.nodes.length<3&&(k="Your morpheme visualizer will appear here after you have synced.");var l=(j.append("text").attr("class","vis-title").attr("dy","1em").attr("dx","1em").style("fill","#cccccc").text(k),null);i.nodes(e.nodes).links(e.links).start();var m=j.selectAll("line.link").data(e.links).enter().append("line").attr("class","link").style("stroke-width",function(a){return Math.sqrt(a.value)}),n=j.selectAll("circle.node").data(e.nodes).enter().append("circle").attr("class","node").attr("r",5).style("fill",function(a){return h(a.length)}).on("mouseover",function(a){l=d3.select("body").append("div").style("position","absolute").style("z-index","10").style("visibility","visible").style("color","#fff").text(a.name)}).on("mouseout",function(){l.style("visibility","hidden")}).on("click",function(a){if(window.app&&window.app.router){var b="corpus/"+d+"/search/morphemes:"+a.name;window.app.router.navigate(b,{trigger:!0})}}).call(i.drag);n.append("title").text(function(a){return a.name}),i.on("tick",function(){m.attr("x1",function(a){return a.source.x}).attr("y1",function(a){return a.source.y}).attr("x2",function(a){return a.target.x}).attr("y2",function(a){return a.target.y}),n.attr("cx",function(a){return a.x}).attr("cy",function(a){return a.y})})}},a.init=function(){return"init"}}("object"==typeof exports&&exports||this);